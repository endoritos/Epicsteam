{% extends 'base.html.twig' %}

{% block title %}Friend Requests{% endblock %}

{% block body %}
<div class="container mx-auto px-4 mt-11">
    <h1 class="text-xl font-bold my-4">Friend Requests</h1>
    
    {% for request in receivedRequests %}
    <div class="mb-4 p-4 border rounded shadow">
        <p><strong>From:</strong> {{ request.requester.username }}</p>
        <div class="flex space-x-2 mt-2">
            <form method="post" action="{{ path('respond_to_request', {'requestId': request.id, 'action': 'accept'}) }}">
                <input type="hidden" name="_csrf_token" value="{{ csrfTokensAccept[request.id] }}">
                <button type="submit" class="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600">Accept</button>
            </form>
            <form method="post" action="{{ path('respond_to_request', {'requestId': request.id, 'action': 'decline'}) }}">
                <input type="hidden" name="_csrf_token" value="{{ csrfTokensDecline[request.id] }}">
                <button type="submit" class="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600">Decline</button>
            </form>
        </div>
    </div>
{% else %}
    <p class="mb-4 p-4 border rounded shadow">
        no new friends request <br>
        wahahah get some friends.</p>
{% endfor %}
</div>

<div class="flex justify-center gap-4 my-4 ">
    <form id="chatSelectorForm" action="#" method="post">
    <select id="friendSelect" name="friendId" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center inline-flex items-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
        {% for friend in friends %}
            <option value="{{ friend.id }}">{{ friend.username }}</option>
        {% endfor %}
    </select>
    <button type="button" id="startChatButton" class="text-white bg-purple-700 hover:bg-purple-800 focus:outline-none focus:ring-4 focus:ring-purple-300 font-medium rounded-full text-sm px-5 py-2.5 text-center mb-2 dark:bg-purple-600 dark:hover:bg-purple-700 dark:focus:ring-purple-900">Start Conversation</button>
</form>
</div>


<div id="chatContainer" style="display:none;">
    <div id="chatMessages" style="font-family: Copperplate; font-size: 30px;" ></div>
    <textarea id="chatInput" class="block w-full p-4 text-gray-900 border border-gray-300 rounded-lg bg-gray-50 text-base focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"></textarea>
    <button type="button" id="sendMessageButton" class="text-white bg-purple-700 hover:bg-purple-800 focus:outline-none focus:ring-4 focus:ring-purple-300 font-medium rounded-full text-sm px-5 py-2.5 text-center mb-2 dark:bg-purple-600 dark:hover:bg-purple-700 dark:focus:ring-purple-900">Send</button>
</div>

<script>
    document.getElementById('startChatButton').addEventListener('click', function() {
        var selectedFriendId = document.getElementById('friendSelect').value;
        document.getElementById('chatContainer').style.display = 'block';
        loadChatMessages(selectedFriendId);
    });

    function loadChatMessages(friendId) {
        fetch(`/load-chat-messages/${friendId}`)
            .then(response => response.json())
            .then(data => {
                const chatMessages = document.getElementById('chatMessages');
                chatMessages.innerHTML = ''; // Clear previous messages
                data.forEach(msg => {
                    const messageElement = document.createElement('div');
                    messageElement.textContent = `${msg.from}: ${msg.message}`;
                    chatMessages.appendChild(messageElement);
                });
            })
            .catch(error => console.error('Error loading chat messages:', error));
    }

    document.getElementById('sendMessageButton').addEventListener('click', function() {
        const receiverId = document.getElementById('friendSelect').value;
        const messageText = document.getElementById('chatInput').value;
    
        if (!messageText.trim()) {
            alert('Please enter a message.');
            return;
        }
    
        fetch('/send-message', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: `receiverId=${receiverId}&message=${encodeURIComponent(messageText)}`
        })
        .then(response => response.json())
        .then(data => {
            if (data.status === 'success') {
                document.getElementById('chatInput').value = '';
                loadChatMessages(receiverId); 
            } else {
                console.error('Failed to send message:', data.message);
            }
        })
        .catch(error => console.error('Error sending message:', error));
    });
    
</script>
{% endblock %}
